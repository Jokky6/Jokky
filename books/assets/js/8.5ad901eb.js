(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{154:function(a,t,e){},178:function(a,t,e){"use strict";var i=e(154);e.n(i).a},193:function(a,t,e){"use strict";e.r(t);e(178);var i=e(3),n=Object(i.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),e("h2",{attrs:{id:"什么是-lin-cms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-lin-cms","aria-hidden":"true"}},[a._v("#")]),a._v(" 什么是 Lin CMS?")]),a._v(" "),e("p",[a._v("Lin CMS 的构筑思想是有其自身特点的。下面我们阐述一些 Lin 的主要特点。")]),a._v(" "),e("h3",{attrs:{id:"lin-cms-是一个前后端分离的-cms-解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lin-cms-是一个前后端分离的-cms-解决方案","aria-hidden":"true"}},[a._v("#")]),a._v(" Lin CMS 是一个前后端分离的 CMS 解决方案")]),a._v(" "),e("p",[a._v("这意味着，Lin 既提供后台的支撑，也有一套对应的前端系统，当然双端分离的好处不仅仅在于此，Lin 目前已有 Python 版本的实现。如果你心仪 Lin，却又因为技术栈的原因无法即可使用，没关系，我们即将推出"),e("code",[a._v("Node.js")]),a._v("和"),e("code",[a._v("Java")]),a._v("版本的 Lin。")]),a._v(" "),e("p",[a._v("为什么 Lin 要选择前后端分离的单页面架构呢？")]),a._v(" "),e("p",[a._v("首先，传统的网站开发更多的是采用服务端渲染的方式，需用使用一种模板语言在服务端完成页面渲染：比如 JinJa2、Jade 等。\n服务端渲染的好处在于可以比较好的支持 SEO，但作为内部使用的 CMS 管理系统，SEO 并不重要。")]),a._v(" "),e("p",[a._v("但一个不可忽视的事实是，服务器渲染的页面到底是由前端开发者来完成，还是由服务器开发者来完成？其实都不太合适。现在已经没有多少前端开发者是了解这些服务端模板语言的，而服务器开发者本身是不太擅长开发页面的。那还是分开吧，前端用最熟悉的 Vue 写 JS 和 CSS，而服务器只关注自己的 API 即可。")]),a._v(" "),e("p",[a._v("其次，单页面应用程序的体验本身就要好于传统网站。")]),a._v(" "),e("h3",{attrs:{id:"框架本身已内置了-cms-常用的功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架本身已内置了-cms-常用的功能","aria-hidden":"true"}},[a._v("#")]),a._v(" 框架本身已内置了 CMS 常用的功能")]),a._v(" "),e("p",[a._v("Lin 已经内置了 CMS 中最为常见的需求：用户管理、权限管理、日志系统等。开发者只需要集中精力开发自己的 CMS 业务即可")]),a._v(" "),e("h3",{attrs:{id:"lin-cms-本身也是一套开发规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lin-cms-本身也是一套开发规范","aria-hidden":"true"}},[a._v("#")]),a._v(" Lin CMS 本身也是一套开发规范")]),a._v(" "),e("p",[a._v("Lin CMS 除了内置常见的功能外，还提供了一套开发规范与工具类。换句话说，开发者无需再纠结如何验证参数？如何操作数据库？如何做全局的异常处理？API 的结构如何？前端结构应该如何组织？这些问题 Lin CMS 已经给出了解决方案。当然，如果你不喜欢 Lin 给出的架构，那么自己去实现自己的 CMS 架构也是可以的。但通常情况下，你确实无需再做出架构上的改动，Lin 可以满足绝大多数中小型的 CMS 需求。")]),a._v(" "),e("p",[a._v("举例来说，每个 API 都需要校验客户端传递的参数。但校验的方法有很多种，不同的开发者会有不同的构筑方案。但 Lin 提供了一套验证机制，开发者无需再纠结如何校验参数，只需模仿 Lin 的校验方案去写自己的业务即可。")]),a._v(" "),e("p",[a._v("还是基于这样的一个原则：Lin CMS 只需要开发者关注自己的业务开发，它已经内置了很多机制帮助开发者快速开发自己的业务。")]),a._v(" "),e("h3",{attrs:{id:"基于插件的扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于插件的扩展","aria-hidden":"true"}},[a._v("#")]),a._v(" 基于插件的扩展")]),a._v(" "),e("p",[a._v("任何优秀的框架都需要考虑到扩展。而 Lin 的扩展支持是通过插件的思想来设计的。当你需要新增一个功能时，你既可以直接在 Lin 的目录下编写代码，也可以将功能以插件的形式封装。比如，你开发了一个文章管理功能，你可以选择以插件的形式来发布，这样其他开发者通过安装你的插件就可以使用这个功能了。毫无疑问，以插件的形式封装功能将最大化代码的可复用性。你甚至可以把自己开发的插件发布，以提供给其他开发者使用。这种机制相当的棒。")]),a._v(" "),e("h3",{attrs:{id:"前端组件库支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端组件库支持","aria-hidden":"true"}},[a._v("#")]),a._v(" 前端组件库支持")]),a._v(" "),e("p",[a._v("Lin 还将提供一套类似于 Vue Element 的前端组件库，以方便前端开发者快速开发。相比于 Vue Element 或 iView 等成熟的组件库，Lin 所提供的组件库将针对 Lin CMS 的整体设计风格、交互体验等作出大量的优化，使用 Lin 的组件库将更容易开发出体验更好的 CMS 系统。当然，Lin 本身不限制开发者选用任何的组件库，你完全可以根据自己的喜好/习惯/熟悉度，去选择任意的一个基于 Vue 的组件库，比如前面提到的 Vue Element 和 iView 等。你甚至可以混搭使用。当然，前提是这些组件库是基于 Vue 的。")]),a._v(" "),e("h3",{attrs:{id:"完善的文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完善的文档","aria-hidden":"true"}},[a._v("#")]),a._v(" 完善的文档")]),a._v(" "),e("p",[a._v("我们将提供详尽的文档来帮助开发者使用 Lin")]),a._v(" "),e("h2",{attrs:{id:"所需基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#所需基础","aria-hidden":"true"}},[a._v("#")]),a._v(" 所需基础")]),a._v(" "),e("p",[a._v("由于 Lin 采用的是前后端分离的架构，所以你至少需要熟悉 Python(Node.js 或者 Java) 和 Vue。")]),a._v(" "),e("p",[a._v("Lin 的服务端框架是基于 Python Flask 的，所以如果你比较熟悉 Flask 的开发模式，那将可以更好的使用 Lin。但如果你并不熟悉 Flask，我们认为也没有太大的关系，因为 Lin 本身已经提供了一套完整的开发机制，你只需要在 Lin 的框架下用 Python 来编写自己的业务代码即可。照葫芦画瓢应该就是这种感觉。")]),a._v(" "),e("p",[a._v("如果你不熟悉 Python，甚至说不会 Python，没关系。我们的 "),e("a",{attrs:{href:"https://github.com/PedroGao/lin-cms-koa",target:"_blank",rel:"noopener noreferrer"}},[a._v("Node.js"),e("OutboundLink")],1),a._v(" 版本正在路上，弯弓待发。")]),a._v(" "),e("p",[a._v("但前端不同，前端还是需要开发者比较熟悉 Vue 的。但我想以 Vue 在国内的普及程度，绝大多数的开发者是没有问题的。这也正是我们选择 Vue 作为前端框架的原因。如果你喜欢 React Or Angular，那么加入我们，为 Lin 开发一个对应的版本吧。")]),a._v(" "),e("h2",{attrs:{id:"即将推出的-node-js（正在路上）-和-java-版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#即将推出的-node-js（正在路上）-和-java-版本","aria-hidden":"true"}},[a._v("#")]),a._v(" 即将推出的 Node.js（正在路上） 和 Java 版本")]),a._v(" "),e("p",[a._v("我们在多方面的考虑和衡量下选择了 Node.js 作为团队第二个引入的技术栈。")]),a._v(" "),e("ul",[e("li",[a._v("\bNode.js 受众广，不论是前端，后端，甚至是测试、UI 都有一定的 js 基础。")]),a._v(" "),e("li",[a._v("Node.js 近几年一直蓬勃发展，但是真正易用的 CMS 框架鲜有，Lin 希望填补这一空缺。")]),a._v(" "),e("li",[a._v("...")])]),a._v(" "),e("p",[a._v("在框架上，我们选择了"),e("code",[a._v("koa")]),a._v("作为基础框架，整合了 koa-router，typerom，jsonwebtoken 等一系列的框架，得益于 flask 版本的实现，koa 版的 CMS 更加优良与易用。lin-cms-koa 在很大程度上借鉴了 lin-cms-flask，我们尽量保证二者的架构和模式一致。当然由于二者属于不同语言，也有截然不同的生态，因此或多或少的存在一定的差异性，我们后续会在文档中详细介绍。")]),a._v(" "),e("p",[a._v("lin-cms-koa 实现的主要技术栈和特点：")]),a._v(" "),e("ul",[e("li",[a._v("整合了"),e("code",[a._v("koa-router")]),a._v("作为基础路由框架，并提供"),e("strong",[a._v("红图")]),a._v("进行权限管理。")]),a._v(" "),e("li",[a._v("整合了"),e("code",[a._v("class-validator")]),a._v("作为参数校验库。")]),a._v(" "),e("li",[a._v("整合了"),e("code",[a._v("typeorm")]),a._v("框架，方便进行数据库操作。")]),a._v(" "),e("li",[a._v("整合了"),e("code",[a._v("jsonwebtoken")]),a._v("框架，并提供了"),e("code",[a._v("access_token")]),a._v("和"),e("code",[a._v("refresh_token")]),a._v("的令牌机制。")]),a._v(" "),e("li",[a._v("提供了 配置、日志、权限等诸多基础功能，当然得益于 koa 的生态，你也可以使用任何其它三方库。")])]),a._v(" "),e("p",[e("strong",[a._v("想要深入了解这些项目的实现原理？请"),e("router-link",{attrs:{to:"/lin/lin-cms/lin/imooc/"}},[a._v("前往")])],1)]),a._v(" "),e("p",{staticClass:"action"},[e("a",{staticClass:"action-button",attrs:{href:"/lin/lin-cms/start/"}},[a._v("快速开始")])])])},[],!1,null,null,null);t.default=n.exports}}]);